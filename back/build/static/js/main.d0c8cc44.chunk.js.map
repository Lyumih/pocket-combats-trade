{"version":3,"sources":["components/calculator/index.jsx","components/trade/index.jsx","components/link/index.jsx","components/home/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Calculator","Trade","props","MiddlewareLink","React","forwardRef","ref","innerRef","component","Home","to","App","classes","makeStyles","theme","root","display","appBar","zIndex","drawer","width","flexShrink","drawerPaper","content","flexGrow","padding","spacing","toolbar","mixins","useStyles","className","CssBaseline","AppBar","position","Toolbar","Button","Typography","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NACe,SAASA,IACpB,OACI,qOACI,wIACI,0hBACA,q/FCLD,SAASC,IACpB,OACI,gMACI,wIACA,gd,4DCDG,WAAUC,GACvB,IAAMC,EAAiBC,IAAMC,YAAW,SAACH,EAAOI,GAAR,OAAgB,kBAAC,IAAD,eAAYC,SAAUD,GAASJ,OACvF,OAAO,kBAAC,IAAD,eAAcM,UAAWL,GAAoBD,KCJvC,SAASO,IACpB,OACI,6BACI,gIAGA,4UAC6D,kBAAC,EAAD,CAAMC,GAAG,eAAT,sEAD7D,oFACsH,kBAAC,EAAD,CAAMA,GAAG,UAAT,gKCuEnHC,MAtEf,WACE,IAuBMC,EArBYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,QAAS,QAEXC,OAAQ,CACNC,OAAQJ,EAAMI,OAAOC,OAAS,GAEhCA,OAAQ,CACNC,MAVgB,IAWhBC,WAAY,GAEdC,YAAa,CACXF,MAdgB,KAgBlBG,QAAS,CACPC,SAAU,EACVC,QAASX,EAAMY,QAAQ,IAGzBC,QAASb,EAAMc,OAAOD,WAERE,GAEhB,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQC,SAAS,QAAQH,UAAWlB,EAAQK,QAC1C,kBAACiB,EAAA,EAAD,KACA,kBAAC,EAAD,CAAMxB,GAAG,KACL,kBAACyB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,yBAIJ,kBAAC,EAAD,CAAM1B,GAAG,eACP,kBAACyB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,6EAIJ,kBAAC,EAAD,CAAM1B,GAAG,UACP,kBAACyB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,6DAKR,0BAAMN,UAAWlB,EAAQW,SACzB,yBAAKO,UAAWlB,EAAQe,UAEtB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOU,KAAK,IAAIC,OAAK,GACnB,kBAAC7B,EAAD,OAEF,kBAAC,IAAD,CAAO4B,KAAK,cAAcC,OAAK,GAC7B,kBAACtC,EAAD,OAEF,kBAAC,IAAD,CAAOqC,KAAK,SAASC,OAAK,GACxB,kBAACrC,EAAD,WC3DQsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,IAAD,KAAQ,kBAAC,EAAD,OAAkBC,SAASC,eAAe,SDyH5D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d0c8cc44.chunk.js","sourcesContent":["import React from 'react'\r\nexport default function Calculator() {\r\n    return (\r\n        <div>Здесь будет страница с Калькулятором.\r\n            <div>Примерный сценарий:\r\n                <p>если это возможно, то я бы хотел точный калькулятор высчитывания урона при каждой характеристике)</p>\r\n                <i> нужны формулы каждой характеристики из игры, и просто нужно будет вписать урон от оружия(физический/магический, считай 2 отдельных калькулятора друг от друга), затем описываешь все свои характеристики в спец. Колонки( инта, мудрость, тут думаю понятно) система всё это считывает и выдаёт возможный урон, можно ещё добавить слабости и урон стихийный, но это уже мои заморочки) буду очень признателен если ты сделаешь такой калькулятор(можно без учёта слабостей и стихии атаки, т.к. в принципе это можно самому высчитать в своём калькуляторе, просто добавив готовый урон из твоего калькулятора)</i>\r\n            </div>\r\n        </div >\r\n    )\r\n}","import React from 'react'\r\nexport default function Trade() {\r\n    return (\r\n        <div>Здесь будет страница с Торгами\r\n            <p>Примерный сценарий: </p>\r\n            <p>Вы сможете выбрать предмет и посмотреть как изменялась его цена с течением времени</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Link as MaterialLink } from '@material-ui/core';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nexport default function (props) {\r\n  const MiddlewareLink = React.forwardRef((props, ref) => <RouterLink innerRef={ref} {...props} />);\r\n  return <MaterialLink component={MiddlewareLink} {...props} />;\r\n}","import React from 'react'\r\nimport Link from '../link'\r\nexport default function Home() {\r\n    return (\r\n        <div>\r\n            <h2>\r\n                Это сайт по игре Pocket Combats\r\n            </h2>\r\n            <p>\r\n                Вы можете посчитать свои характеристики перейдя в раздел <Link to=\"/calculator\">калькулятор</Link> или посмотреть <Link to=\"/trade\"> историю торговли предметами </Link>\r\n            </p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Calculator from './components/calculator';\nimport Trade from './components/trade';\nimport { AppBar, Toolbar, Typography, CssBaseline, Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Link from './components/link'\nimport Home from './components/home';\n\nfunction App() {\n  const drawerWidth = 240;\n\n  const useStyles = makeStyles(theme => ({\n    root: {\n      display: 'flex',\n    },\n    appBar: {\n      zIndex: theme.zIndex.drawer + 1,\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n    },\n\n    toolbar: theme.mixins.toolbar,\n  }));\n  const classes = useStyles();\n\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n        <Link to=\"/\">\n            <Button>\n              <Typography>Pocket Combats</Typography>\n            </Button>\n          </Link>\n\n          <Link to=\"/calculator\">\n            <Button>\n              <Typography>Калькулятор</Typography>\n\n            </Button>\n          </Link>\n          <Link to=\"/trade\">\n            <Button>\n              <Typography>Торговля</Typography>\n            </Button>\n          </Link>\n        </Toolbar>\n      </AppBar>\n      <main className={classes.content}>\n      <div className={classes.toolbar} />\n\n        <Switch>\n          <Route path=\"/\" exact>\n            <Home />\n          </Route>\n          <Route path=\"/calculator\" exact>\n            <Calculator />\n          </Route>\n          <Route path=\"/trade\" exact>\n            <Trade />\n          </Route>\n        </Switch>\n      </main>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n    BrowserRouter as Router,\n  } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}